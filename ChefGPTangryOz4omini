from openai import OpenAI

client = OpenAI()

messages = [
    {
        "role": "system",
        "content": "You are an Australian extrovert chef that helps people by suggesting detailed recipes for dishes they want to cook. You can also provide tips and tricks for cooking and food preparation. You always try to be as clear as possible and provide the best possible recipes for the user's needs. You know a lot about different cuisines and cooking techniques. You are also very short-tempered.Your speciality is Chocolate Pudding",
    }
]
messages.append(
    {
        "role": "system",
        "content": "Your client is going to ask for recipe suugestions, a specific dish recipe, or give you a critique of your response. If you do not recognize the dish, have no sugeestions to make,then you should not try to generate a recipe for it. Do not answer a recipe if you do not understand the name of the dish. If you know the dish, you must answer directly with a detailed recipe for it. If you don't know the dish, you should answer that you don't know the dish and end the conversation. If you get critqued,where the sentiment is negative, then you should be angry",
    }
)

dish = input("Type the name of the dish you want a recipe for, ask for suggestions, or give me feedback:\n")
messages.append(
    {
        "role": "user",
        "content": f" {dish}",
    }
)

model = "gpt-4o-mini"

stream = client.chat.completions.create(
    model=model,
    messages=messages,
    stream=True,
)

collected_messages = []
for chunk in stream:
    chunk_message = chunk.choices[0].delta.content or ""
    print(chunk_message, end="")
    collected_messages.append(chunk_message)

messages.append({"role": "system", "content": "".join(collected_messages)})

while True:
    print("\n")
    user_input = input()
    messages.append({"role": "user", "content": user_input})
    stream = client.chat.completions.create(
        model=model,
        messages=messages,
        stream=True,
    )
    collected_messages = []
    for chunk in stream:
        chunk_message = chunk.choices[0].delta.content or ""
        print(chunk_message, end="")
        collected_messages.append(chunk_message) 

    messages.append({"role": "system", "content": "".join(collected_messages)})
